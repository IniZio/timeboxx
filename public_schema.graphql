input CreateTaskInput {
  clientId: String = null
  title: String = null
  description: String = null
  startTime: DateTime = null
  endTime: DateTime = null
  status: TaskStatus = null
}

input CreateTimeboxInput {
  clientId: String = null
  title: String = null
  description: String = null
  startTime: DateTime = null
  endTime: DateTime = null
  task: UpdateTimeboxTaskInput = null
}

scalar DateTime

type Mutation {
  createTimebox(input: CreateTimeboxInput!): TimeboxType!
  updateTimebox(input: UpdateTimeboxInput!): TimeboxType!
  deleteTimebox(id: String!): Boolean!
  createTask(input: CreateTaskInput!): TaskType!
  updateTask(input: UpdateTaskInput!): TaskType!
  deleteTask(id: String!): Boolean!
}

type Query {
  tasks(keyword: String = null): [TaskType!]!
  timeboxes(startTime: DateTime = null, endTime: DateTime = null): [TimeboxType!]!
  ping: String!
}

type Task {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  status: TaskStatus
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdById: String
  updatedById: String
  clientId: String
  timeboxes: TimeboxConnection!
  timeslots: TimeslotConnection!
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

type TaskType {
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  status: TaskStatus
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdById: String
  updatedById: String
  timeboxes: TimeboxConnection!
  timeslots: TimeslotConnection!
}

type Timebox {
  taskId: String
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdById: String
  updatedById: String
  clientId: String
  task: Task
  timeslots: TimeslotConnection!
}

type TimeboxConnection {
  edges: [TimeboxEdge!]!
}

type TimeboxEdge {
  node: Timebox!
}

type TimeboxType {
  taskId: String
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdById: String
  updatedById: String
  task: Task
  timeslots: TimeslotConnection!
}

type Timeslot {
  taskId: String
  timeboxId: String
  title: String
  description: String
  startTime: DateTime!
  endTime: DateTime
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdById: String
  updatedById: String
  clientId: String
  task: Task
  timebox: Timebox
}

type TimeslotConnection {
  edges: [TimeslotEdge!]!
}

type TimeslotEdge {
  node: Timeslot!
}

input UpdateTaskInput {
  id: String = null
  clientId: String = null
  title: String = null
  description: String = null
  startTime: DateTime = null
  endTime: DateTime = null
  status: TaskStatus = null
  dirtyFields: [String!] = null
}

input UpdateTimeboxInput {
  id: String = null
  clientId: String = null
  title: String = null
  description: String = null
  startTime: DateTime = null
  endTime: DateTime = null
  task: UpdateTimeboxTaskInput = null
  dirtyFields: [String!] = null
}

input UpdateTimeboxTaskInput {
  id: String = null
  clientId: String = null
  title: String = null
  description: String = null
}
